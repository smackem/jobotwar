@using Jobotwar.WebApp.Features.Api
@using Jobotwar.WebApp.Services
@using Microsoft.Extensions.Logging
@using System.Threading
@inject IApiClient _api
@inject ILogger<RobotEditor> _log;
@inject TickerFactory _tickerFactory;
@implements IDisposable

<form action="#" class="row p-3">
    <div class="col-8">
        <label for="robotName" class="col-form-label">Name</label>
        <input type="text" id="robotName" class="form-control" @bind="Robot!.Name"/>
    </div>
    <div class="col-2">
        <label for="robotColor" class="col-form-label">Color</label>
        <input type="color" id="robotColor" class="form-control" @bind="Robot!.Color"/>
    </div>
    <div class="col-2">
        <label for="robotColor" class="col-form-label">Language</label>
        <select id="languageVersion" class="form-control" @bind="Robot!.LanguageVersion">
            <option value="V1">V1</option>
            <option value="V2">V2</option>
        </select>
    </div>
    <div class="col-12">
        <label for="robotCode" class="col-form-label">Code</label>
        <MonacoEditor @ref="_codeEditor" Id="robotCode" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="EditorModelContentChanged" />
        @*<textarea id="robotCode" class="form-control" rows="12" @bind="Robot!.Code" @oninput="CodeChanged"></textarea>*@
@if (_compilationError != null)
{
        <div class="alert alert-warning my-1">@_compilationError</div> 
}
    </div>
</form>

@code {
    private MonacoEditor? _codeEditor;

    [Parameter]
    public RobotModel? Robot
    {
        get => _robotModel;
        set
        {
            _robotModel = value;
            _compilationError = null;
            _codeEditor?.SetValue(value?.Code);
        }
    }

    private RobotModel? _robotModel;
    private string? _compilationError;
    private CancellationTokenSource? _tickerCancellationTokenSource;
    private int? _lastCodeChangeTicks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _tickerCancellationTokenSource = new CancellationTokenSource();
        var _ = _tickerFactory.Repeat(Tick, TimeSpan.FromSeconds(1), _tickerCancellationTokenSource.Token);
    }

    private async Task<bool> Tick()
    {
        var ticks = Environment.TickCount;
        if (_lastCodeChangeTicks == null || ticks - _lastCodeChangeTicks.Value < 1000 || _codeEditor == null)
        {
            return true;
        }

        var robot = Robot!;
        var code = await _codeEditor.GetValue();
        var request = new CompileRequest(robot.Name, robot.LanguageVersion, code);
        _log.LogInformation("issuing compile request: {CompileRequest}", request);
        try
        {
            await _api.Compile(request);
            _compilationError = null;
        }
        catch (BadRequestException e)
        {
            _log.LogError(e, "caught BadRequestException");
            _compilationError = e.RemoteMessage;
        }
        _lastCodeChangeTicks = null;
        StateHasChanged();
        return true;
    }

    public void Dispose()
    {
        _tickerCancellationTokenSource?.Cancel();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Theme = "vs-dark",
            RenderWhitespace = "all",
            Minimap = new EditorMinimapOptions { Enabled = false },
            Dimension = new Dimension { Height = 500 },
            AutomaticLayout = true,
            Language = "plaintext",
            Value = Robot?.Code,
        };
    }

    private async void EditorModelContentChanged()
    {
        if (_codeEditor == null)
        {
            return;
        }

        var value = await _codeEditor.GetValue();
        _log.LogInformation("code changed: {SourceCode}", value);
        _log.LogInformation("code changed");
        _lastCodeChangeTicks = Environment.TickCount;

        if (Robot != null)
        {
            Robot.Code = value;
        }
    }
}
