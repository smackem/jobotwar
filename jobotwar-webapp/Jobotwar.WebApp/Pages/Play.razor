@page "/play"
@using Blazor.Extensions
@using Features.Api
@using Jobotwar.WebApp.Drawing
@using Jobotwar.WebApp.Services
@using Microsoft.Extensions.Logging
@using System.Collections.Immutable
@using System.Drawing
@using System.Threading
@inject IApiClient _api
@inject TickerFactory _tickerFactory
@inject NavigationManager _navigationManager
@inject ILogger<Play> _log
@inject ILoggerFactory _loggerFactory;
@implements IDisposable

<h3>Play</h3>

<ul class="nav nav-pills">
    @foreach (var robot in _robotModels)
    {
        var cssClass = robot == _selectedRobotModel ? "nav-link active" : "nav-link";
        <li class="nav-item">
            <a class="@cssClass" aria-current="page" style="cursor: hand" @onclick="() => SelectRobot(robot)">@robot.Name</a>
        </li>
    }
    <button class="btn btn-info" @onclick="AddRobot">Add</button>
</ul>

<form class="row g-3" action="#">
    <div class="col-12">
        <label for="robotName" class="col-form-label">Name</label>
        <input type="text" id="robotName" class="form-control" value="@_selectedRobotModel?.Name"/>
    </div>
    <div class="col-12">
        <label for="robotColor" class="col-form-label">Name</label>
        <input type="color" id="robotColor" class="form-control" value="@_selectedRobotModel?.Color"/>
    </div>
    <div class="col-12">
        <label for="robotCode" class="col-form-label">Code</label>
        <textarea id="robotCode" class="form-control" rows="12">@_selectedRobotModel?.Code</textarea>
    </div>
</form>

<BECanvas Width="@BoardWidth" Height="@BoardHeight" @ref="_canvas" ></BECanvas>

@code {
    private const int BoardWidth = 640;
    private const int BoardHeight = 480;
    private readonly IList<RobotModel> _robotModels = new List<RobotModel>();
    private RobotModel? _selectedRobotModel;

    private BECanvasComponent? _canvas;
    private CancellationTokenSource? _replayCancellationTokenSource;

    private void SelectRobot(RobotModel robotModel)
    {
        _log.LogInformation("selected robot: {SelectedRobot}", robotModel);
        if (robotModel != null && _robotModels.Contains(robotModel) == false)
        {
            throw new ArgumentException($"{nameof(robotModel)} is not contained in the robot list");
        }
        _selectedRobotModel = robotModel;
    }

    private void AddRobot()
    {
        _log.LogInformation("add robot");
        var robot = new RobotModel
        {
            Name = "Robot " + (_robotModels.Count + 1),
        };
        _robotModels.Add(robot);
        _selectedRobotModel = robot;
    }

    protected override async Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += NavigationManager_LocationChanged;

        await PlayGameAsync();
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _log.LogInformation("navigate to: '{QueryUri}', intercepted: {NavigationIntercepted}", e.Location, e.IsNavigationIntercepted);
    }

    private async Task PlayGameAsync()
    {
        const string fastShooterCode = @"
            state main() {
                def angle
                @speed(@random(-50, 50), @random(-50, 50))
                while true {
                    def r = @radar(angle)
                    if r < 0 {
                        @fire(angle, abs(r))
                    } else {
                        angle = angle + 7
                    }
                }
            }";
        const string slowShooterCode = @"
            def angle = 0
            state main() {
                @speed(@random(-50, 50), @random(-50, 50))
                def r = @radar(angle)
                if r < 0 {
                    @fire(angle, abs(r))
                } else {
                    angle = angle + 7
                }
            }";

        var random = new Random();
        const int margin = 30;
        var (width, height) = (BoardWidth, BoardHeight);
        var (fastX, fastY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));
        var (slowX, slowY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));
        var setup = new InstantMatchSetup(5 * 60 * 1000, width, height,
                new[]
                {
                    new InstantMatchRobot("fast", fastShooterCode, "V2", fastX, fastY),
                    new InstantMatchRobot("slow", slowShooterCode, "V2", slowX, slowY)
                });

        var result = await _api.PlayAsync(setup);
        var gameInfo = await _api.GetGameInfoAsync();

        _log.LogInformation("Result: {MatchResult}", result);
        var match = new MatchInfo(setup, result,
                new Dictionary<string, RobotDrawingInfo>
                {
                    { "fast", new RobotDrawingInfo(Color.FromArgb(0xff, 0, 0)) },
                    { "slow", new RobotDrawingInfo(Color.FromArgb(0, 0, 0xff)) },
                }.ToImmutableDictionary());

        _replayCancellationTokenSource = new CancellationTokenSource();
        await MatchReplay.PlayAsync(match,
            gameInfo,
            await _canvas.CreateCanvas2DAsync(),
            _tickerFactory,
            _loggerFactory.CreateLogger<MatchReplay>(),
            _replayCancellationTokenSource.Token);
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= NavigationManager_LocationChanged;
        _log.LogInformation("page disposed: {Page}", this);
        _replayCancellationTokenSource?.Cancel();
    }
}
