@page "/play"
@using Features.Api
@using Jobotwar.WebApp.Drawing
@using Jobotwar.WebApp.Services
@using Microsoft.Extensions.Logging
@using System.Threading
@using System.Collections.Immutable
@inject IApiClient _api
@inject TickerFactory _tickerFactory
@inject NavigationManager _navigationManager
@inject ILogger<Play> _log
@inject ILoggerFactory _loggerFactory;
@inject IModelContainer _model
@implements IDisposable

@* ReSharper disable once ConvertIfStatementToSwitchStatement *@
@if (_uiState == UIState.Editor)
{
    <ul class="nav nav-tabs">
        @foreach (var robot in _model.Robots)
        {
            <li class="nav-item">
                <a class="@GetCssClass(robot)" aria-current="page" @onclick="() => SelectRobot(robot)">
                    @robot.Name
            @if (_model.Robots.Count > 1) 
            {
                    <span class="oi oi-circle-x text-secondary ml-3"
                          style="cursor: pointer; top: 3px; max-width: 16px"
                          @onclick="() => RemoveRobot(robot)"></span>
            }
                </a>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link bg-light border-bottom" aria-current="page" @onclick="AddRobot">
                <span class="oi oi-plus" style="max-width: 16px;"></span>
            </a>
        </li>
    </ul>

    <div class="border border-top-0">
        <RobotEditor @ref="_robotEditor" Robot="@_selectedRobotModel" />
    </div>
    if (string.IsNullOrEmpty(_compilationError) == false)
    {
    <div class="alert alert-danger mt-1">@_compilationError</div> 
    }
    <div class="my-3">
        <button class="btn btn-primary" @onclick="PlayGameAsync">&nbsp;Play!&nbsp;</button>
    </div>
}
else if (_uiState == UIState.Play)
{
    <div style="display: inline-block; border: solid 1px white; box-shadow: 0 0 8px rgba(255, 255, 255, 0.3)">
        <BECanvas Width="@BoardWidth" Height="@BoardHeight" @ref="_canvas"></BECanvas>
    </div>
}
else if (_uiState == UIState.Outcome)
{
    var match = _match!;
    string style;
    string text;
    @if (string.IsNullOrEmpty(match.Result.Winner) == false)
    {
        style = $"color: {match.RobotInfos[match.Result.Winner].CssColor}";
        text = $"{match.Result.Winner} has won!";
    }
    else
    {
        style = string.Empty;
        text = "Draw!";
    }
    <div class="jumbotron">
        <h1 class="display-4" style="@style">@text</h1>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Game Time</th>
                    <th scope="col">Event</th>
                </tr>
            </thead>
            <tbody>
        @foreach (var entry in match.Result.EventLog)
        {
                <tr>
                    <td>@TimeSpan.FromMilliseconds(entry.GameTimeMillis)</td>
                    <td>@entry.Event</td>
                </tr>
        }
            </tbody>
        </table>
        <button class="btn btn-primary btn-lg" @onclick="() => _uiState = UIState.Editor">OK</button>
    </div>
}

@code {
    private const int BoardWidth = 640;
    private const int BoardHeight = 480;
    private RobotEditor? _robotEditor;
    private RobotModel? _selectedRobotModel;
    private BECanvasComponent? _canvas;
    private CancellationTokenSource? _replayCancellationTokenSource;
    private UIState _uiState = UIState.Editor;
    private MatchInfo? _match;
    private string? _compilationError;

    // ReSharper disable once InconsistentNaming
    private enum UIState
    {
        Editor,
        Play,
        Outcome,
    }

    private string GetCssClass(RobotModel robot)
    {
        const string css = "nav-link default-cursor";
        return robot == _selectedRobotModel ? css + " active" : css;
    }

    private void SelectRobot(RobotModel? robotModel)
    {
        _log.LogInformation("selected robot: {SelectedRobot}", robotModel);
        if (robotModel != null && _model.Robots.Contains(robotModel) == false)
        {
            throw new ArgumentException($"{nameof(robotModel)} is not contained in the robot list");
        }
        _selectedRobotModel = robotModel;
    }

    private void RemoveRobot(RobotModel robot)
    {
        _model.RemoveRobot(robot);
        if (robot == _selectedRobotModel)
        {
            SelectRobot(_model.Robots.FirstOrDefault());
        }
    }

    private void AddRobot()
    {
        var robot = _model.NewRobot();
        SelectRobot(robot);
    }

    protected override Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += NavigationManager_LocationChanged;
        _selectedRobotModel = _model.Robots.FirstOrDefault();
        return base.OnInitializedAsync();
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _log.LogInformation("navigate to: '{QueryUri}', intercepted: {NavigationIntercepted}", e.Location, e.IsNavigationIntercepted);
    }

    private async Task PlayGameAsync()
    {
        var random = new Random();
        const int margin = 30;
        var (width, height) = (BoardWidth, BoardHeight);

        var setup = new InstantMatchSetup(5 * 60 * 1000, width, height,
            _model.Robots.Select(r => new InstantMatchRobot(r.Name, r.Code, "V2",
                    random.Next(margin, width - margin),
                    random.Next(margin, height - margin)))
                .ToArray());

        InstantMatchResult result;
        try
        {
            result = await _api.PlayAsync(setup);
            _compilationError = null;
        }
        catch (BadRequestException e)
        {
            _compilationError = e.RemoteMessage;
            return;
        }

        var gameInfo = await _api.GetGameInfoAsync();

        _log.LogInformation("Result: {MatchResult}", result);
        var match = new MatchInfo(setup, result,
            _model.Robots.ToImmutableDictionary(
                r => r.Name,
                r => new RobotDrawingInfo(r.Color)));

        _replayCancellationTokenSource = new CancellationTokenSource();
        _uiState = UIState.Play;
        StateHasChanged();

        await MatchReplay.PlayAsync(match,
            gameInfo,
            await _canvas.CreateCanvas2DAsync(),
            _tickerFactory,
            _loggerFactory.CreateLogger<MatchReplay>(),
            _replayCancellationTokenSource.Token);

        _log.LogInformation("game replay finished");
        _match = match;
        _uiState = UIState.Outcome;
        StateHasChanged();
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= NavigationManager_LocationChanged;
        _log.LogInformation("page disposed: {Page}", this);
        _replayCancellationTokenSource?.Cancel();
    }
}
