@page "/play"
@using Features.Api
@using Jobotwar.WebApp.Drawing
@using Jobotwar.WebApp.Services
@using Microsoft.Extensions.Logging
@using System.Threading
@using System.Collections.Immutable
@inject IApiClient _api
@inject TickerFactory _tickerFactory
@inject NavigationManager _navigationManager
@inject ILogger<Play> _log
@inject ILoggerFactory _loggerFactory;
@inject IModelContainer _model
@inject IToastService _toastService
@inject IPlayService _playService;
@implements IDisposable

@* ReSharper disable once ConvertIfStatementToSwitchStatement *@
@if (_uiState == UIState.Editor)
{
    <ul class="nav nav-tabs">
        @foreach (var robot in _model.Robots)
        {
            <li class="nav-item">
                <a class="@GetCssClass(robot)" aria-current="page" @onclick="() => SelectRobot(robot)"
                   style="color: @robot.Color">
                    @robot.Name
            @if (_model.Robots.Count > 1) 
            {
                    <span class="ml-3 close-tab-icon" @onclick="() => RemoveRobot(robot)">
                        <strong>&times;</strong>
                    </span>
            }
                </a>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link bg-light border-bottom" aria-current="page" @onclick="AddRobot">
                <span class="oi oi-plus"></span>
            </a>
        </li>
    </ul>
    <div class="border border-top-0">
        <RobotEditor @ref="_robotEditor" Robot="@_selectedRobotModel" />
    </div>
    <div class="my-3">
        <button class="btn btn-primary px-3" @onclick="PlayGameAsync">&nbsp;Play!&nbsp;</button>
        <button class="btn btn-secondary text-white" @onclick="Simulate100">Simulate 100 Matches</button>
    </div>
}
else if (_uiState == UIState.Play)
{
    <div class="play-canvas">
        <BECanvas Width="@_playService.BoardWidth" Height="@_playService.BoardHeight" @ref="_canvas"></BECanvas>
    </div>
}
else if (_uiState == UIState.Outcome)
{
    var (_, result, robotInfos) = _match!;
    string style;
    string text;
    @if (string.IsNullOrEmpty(result.Winner) == false)
    {
        style = $"color: {robotInfos[result.Winner].CssColor}";
        text = $"{result.Winner} has won!";
    }
    else
    {
        style = string.Empty;
        text = "Draw!";
    }
    <div class="jumbotron">
        <h1 class="display-4" style="@style">@text</h1>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Game Time</th>
                    <th scope="col">Event</th>
                </tr>
            </thead>
            <tbody>
        @foreach (var (millis, message) in result.EventLog)
        {
                <tr>
                    <td>@TimeSpan.FromMilliseconds(millis).ToString("g")</td>
                    <td>@message</td>
                </tr>
        }
            </tbody>
        </table>
        <button class="btn btn-primary btn-lg" @onclick="() => _uiState = UIState.Editor">OK</button>
    </div>
}

@code {
    private RobotEditor? _robotEditor;
    private RobotModel? _selectedRobotModel;
    private BECanvasComponent? _canvas;
    private CancellationTokenSource? _replayCancellationTokenSource;
    private UIState _uiState = UIState.Editor;
    private MatchInfo? _match;

    // ReSharper disable once InconsistentNaming
    private enum UIState
    {
        Editor,
        Play,
        Outcome,
    }

    private string GetCssClass(RobotModel robot)
    {
        const string css = "nav-link default-cursor";
        return robot == _selectedRobotModel ? css + " active" : css;
    }

    private void SelectRobot(RobotModel? robotModel)
    {
        _log.LogInformation("selected robot: {SelectedRobot}", robotModel);
        if (robotModel != null && _model.Robots.Contains(robotModel) == false)
        {
            throw new ArgumentException($"{nameof(robotModel)} is not contained in the robot list");
        }
        _selectedRobotModel = robotModel;
    }

    private void RemoveRobot(RobotModel robot)
    {
        _model.RemoveRobot(robot);
        if (robot == _selectedRobotModel)
        {
            SelectRobot(_model.Robots.FirstOrDefault());
        }
    }

    private void AddRobot()
    {
        var robot = _model.NewRobot();
        SelectRobot(robot);
    }

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += NavigationManager_LocationChanged;
        _selectedRobotModel = _model.Robots.FirstOrDefault();
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _log.LogInformation("navigate to: '{QueryUri}', intercepted: {NavigationIntercepted}", e.Location, e.IsNavigationIntercepted);
    }
    
    private async Task PlayGameAsync()
    {
        InstantMatchSetup setup;
        InstantMatchResult result;
        try
        {
            (setup, result) = await _playService.PlayMatchAsync(_model.Robots);
        }
        catch (BadRequestException e)
        {
            _toastService.ShowError(e.RemoteMessage);
            return;
        }

        var gameInfo = await _api.GetGameInfoAsync();

        _log.LogInformation("Result: {MatchResult}", result);
        var match = new MatchInfo(setup, result,
            _model.Robots.ToImmutableDictionary(
                r => r.Name,
                r => new RobotDrawingInfo(r.Color)));

        _replayCancellationTokenSource = new CancellationTokenSource();
        _uiState = UIState.Play;
        StateHasChanged();

        await MatchReplay.PlayAsync(match,
            gameInfo,
            await _canvas.CreateCanvas2DAsync(),
            _tickerFactory,
            _loggerFactory.CreateLogger<MatchReplay>(),
            _replayCancellationTokenSource.Token);

        _log.LogInformation("game replay finished");
        _match = match;
        _uiState = UIState.Outcome;
        StateHasChanged();
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= NavigationManager_LocationChanged;
        _log.LogInformation("page disposed: {Page}", this);
        _replayCancellationTokenSource?.Cancel();
    }

    private void Simulate100()
    {
        _navigationManager.NavigateTo("/simulation/100");
    }
}
