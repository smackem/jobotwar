@page "/play"
@using Blazor.Extensions
@using Features.Api
@using Jobotwar.WebApp.Drawing
@using Jobotwar.WebApp.Services
@using Microsoft.Extensions.Logging
@using System.Collections.Immutable
@using System.Collections.Generic
@using System.Drawing
@inject IApiClient _api
@inject TickerFactory _tickerFactory
@inject NavigationManager _navigationManager
@inject ILogger<Play> _log

<Info />

<h3>Play</h3>

<p>
    <div class="btn-group">
        <button class="btn btn-info">Hepp</button>
        <button class="btn btn-warning">Hopp</button>
    </div>
</p>

<BECanvas Width="@BoardWidth" Height="@BoardHeight" @ref="_canvas" ></BECanvas>

@code {
    private const int BoardWidth = 640;
    private const int BoardHeight = 480;

    private BECanvasComponent? _canvas;

    protected override async Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += NavigationManager_LocationChanged;

        await PlayGameAsync();
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("/play") == false)
        {
            _log.LogInformation("navigate to: '{QueryUri}', intercepted: {NavigationIntercepted}", e.Location, e.IsNavigationIntercepted);
            _navigationManager.LocationChanged -= NavigationManager_LocationChanged;
        }
    }

    private async Task PlayGameAsync()
    {
        const string fastShooterCode = @"
            state main() {
                def angle
                @speed(@random(-50, 50), @random(-50, 50))
                while true {
                    def r = @radar(angle)
                    if r < 0 {
                        @fire(angle, abs(r))
                    } else {
                        angle = angle + 7
                    }
                }
            }";
        const string slowShooterCode = @"
            def angle = 0
            state main() {
                @speed(@random(-50, 50), @random(-50, 50))
                def r = @radar(angle)
                if r < 0 {
                    @fire(angle, abs(r))
                } else {
                    angle = angle + 7
                }
            }";

        var random = new Random();
        const int margin = 30;
        var (width, height) = (BoardWidth, BoardHeight);
        var (fastX, fastY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));
        var (slowX, slowY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));
        var setup = new InstantMatchSetup(5 * 60 * 1000, width, height,
                new[]
                {
                    new InstantMatchRobot("fast", fastShooterCode, "V2", fastX, fastY),
                    new InstantMatchRobot("slow", slowShooterCode, "V2", slowX, slowY)
                });

        var result = await _api.PlayAsync(setup);

        _log.LogInformation("Result: {MatchResult}", result);
        var match = new MatchInfo(setup, result,
                new Dictionary<string, RobotDrawingInfo>
                {
                    { "fast", new RobotDrawingInfo(Color.FromArgb(0xff, 0, 0)) },
                    { "slow", new RobotDrawingInfo(Color.FromArgb(0, 0xff, 0)) },
                }.ToImmutableDictionary());

        await MatchReplay.Play(match, await _canvas.CreateCanvas2DAsync(), _tickerFactory);
    }
}
