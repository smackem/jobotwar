@page "/play"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Features.Api
@using Jobotwar.WebApp.Drawing
@using Jobotwar.WebApp.Services
@using System.Threading
@inject ApiClient _api
@inject TickerFactory _tickerFactory

<Info />

<h3>Play</h3>

<BECanvas Width="@BoardWidth" Height="@BoardHeight" @ref="_canvas" ></BECanvas>

@code {
    private const int BoardWidth = 640;
    private const int BoardHeight = 480;

    private BECanvasComponent? _canvas;

    protected override async Task OnInitializedAsync()
    {
        await PlayGame();
    }

    private async Task PlayGame()
    {
        const string fastShooterCode = @"
            state main() {
                def angle
                @speed(@random(-50, 50), @random(-50, 50))
                while true {
                    def r = @radar(angle)
                    if r < 0 {
                        @fire(angle, abs(r))
                    } else {
                        angle = angle + 7
                    }
                }
            }";
        const string slowShooterCode = @"
            def angle = 0
            state main() {
                @speed(@random(-50, 50), @random(-50, 50))
                def r = @radar(angle)
                if r < 0 {
                    @fire(angle, abs(r))
                } else {
                    angle = angle + 7
                }
            }";

        var random = new Random();
        const int margin = 30;
        var (width, height) = (BoardWidth, BoardHeight);
        var (fastX, fastY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));
        var (slowX, slowY) = (random.Next(margin, width - margin), random.Next(margin, height - margin));

        var result = await _api.Play(new InstantMatchSetup(5 * 60 * 1000, width, height,
            new[]
            {
                new InstantMatchRobot("fast", fastShooterCode, "V2", fastX, fastY),
                new InstantMatchRobot("slow", slowShooterCode, "V2", slowX, slowY)
            }));
        
        Console.WriteLine(result);
        await MatchReplay.Play(BoardWidth, BoardHeight, result, await _canvas.CreateCanvas2DAsync(), _tickerFactory);
    }
}
